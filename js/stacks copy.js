// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  require.config({
    baseUrl: '/static/stacks/js/',
    waitSeconds: 200,
    paths: {
      jquery: 'library/jquery-1.9.1.min',
      text: 'library/text',
      handlebars: 'library/handlebars',
      underscore: 'library/underscore-min',
      backbone: 'library/backbone-min'
    },
    shim: {
      handlebars: {
        exports: 'Handlebars'
      },
      underscore: {
        exports: '_'
      },
      backbone: {
        deps: ['underscore', 'jquery'],
        exports: 'Backbone'
      }
    }
  });

  define(function(require, exports, module) {
    var $, Article, ArticleView, Articles, Backbone, ErrorHandler, EventAggregator, File, FileType, Files, Handlebars, Issue, IssueDetail, IssuesOfVolume, Journal, JournalDetail, JournalList, JournalSublist, Journals, Menu, OrphanView, Paginator, Publisher, PublisherList, Publishers, Stacks, Title, Volume, VolumeDetail, Volumes, VolumesOfJournal, articleMenuTemplate, error, eventAgg, htmlTemplate, imageTemplate, issueDetail, issueTemplate, journalDetail, journalTemplate, menu, menuTemplate, paginator, paginatorTemplate, pdfTemplate, publisherTemplate, stacks, title, titleTemplate, volumeDetail, volumeTemplate, xmlTemplate,
      _this = this;
    $ = require('jquery');
    Handlebars = require('handlebars');
    Backbone = require('backbone');
    menuTemplate = require('text!templates/menu.handlebars');
    articleMenuTemplate = require('text!templates/articlemenu.handlebars');
    publisherTemplate = require('text!templates/publishers.handlebars');
    journalTemplate = require('text!templates/journals.handlebars');
    volumeTemplate = require('text!templates/volumes.handlebars');
    issueTemplate = require('text!templates/issues.handlebars');
    journalDetail = require('text!templates/journaldetail.handlebars');
    volumeDetail = require('text!templates/volumedetail.handlebars');
    issueDetail = require('text!templates/issuedetail.handlebars');
    titleTemplate = require('text!templates/title.handlebars');
    pdfTemplate = require('text!templates/pdf.handlebars');
    imageTemplate = require('text!templates/image.handlebars');
    xmlTemplate = require('text!templates/xml.handlebars');
    htmlTemplate = require('text!templates/html.handlebars');
    paginatorTemplate = require('text!templates/paginator.handlebars');
    Handlebars.registerHelper('page_count', function(index) {
      return index + 1;
    });
    Publisher = (function(_super) {

      __extends(Publisher, _super);

      function Publisher() {
        return Publisher.__super__.constructor.apply(this, arguments);
      }

      Publisher.prototype.urlRoot = '/api/v1/stacks/publisher/';

      return Publisher;

    })(Backbone.Model);
    Journal = (function(_super) {

      __extends(Journal, _super);

      function Journal() {
        return Journal.__super__.constructor.apply(this, arguments);
      }

      Journal.prototype.urlRoot = '/api/v1/stacks/journal-expanded/';

      return Journal;

    })(Backbone.Model);
    Volume = (function(_super) {

      __extends(Volume, _super);

      function Volume() {
        return Volume.__super__.constructor.apply(this, arguments);
      }

      Volume.prototype.urlRoot = '/api/v1/stacks/volume-expanded/';

      Volume.prototype.parse = function(response) {
        _.each(response.orphan_files, function(orphan) {
          return orphan.file_name = orphan.file_path.split('/').pop();
        });
        return response;
      };

      return Volume;

    })(Backbone.Model);
    Issue = (function(_super) {

      __extends(Issue, _super);

      function Issue() {
        return Issue.__super__.constructor.apply(this, arguments);
      }

      Issue.prototype.urlRoot = '/api/v1/stacks/issue-expanded/';

      Issue.prototype.parse = function(response) {
        _.each(response.orphan_files, function(orphan) {
          return orphan.file_name = orphan.file_path.split('/').pop();
        });
        return response;
      };

      return Issue;

    })(Backbone.Model);
    Article = (function(_super) {

      __extends(Article, _super);

      function Article() {
        return Article.__super__.constructor.apply(this, arguments);
      }

      Article.prototype.urlRoot = '/api/v1/stacks/article-expanded/';

      return Article;

    })(Backbone.Model);
    File = (function(_super) {

      __extends(File, _super);

      function File() {
        return File.__super__.constructor.apply(this, arguments);
      }

      File.prototype.urlRoot = '/api/v1/stacks/file/';

      return File;

    })(Backbone.Model);
    Publishers = (function(_super) {

      __extends(Publishers, _super);

      function Publishers() {
        return Publishers.__super__.constructor.apply(this, arguments);
      }

      Publishers.prototype.url = '/api/v1/stacks/publisher/';

      Publishers.prototype.comparator = 'title';

      Publishers.prototype.parse = function(response) {
        return response.objects;
      };

      return Publishers;

    })(Backbone.Collection);
    Journals = (function(_super) {

      __extends(Journals, _super);

      function Journals() {
        return Journals.__super__.constructor.apply(this, arguments);
      }

      Journals.prototype.url = '/api/v1/stacks/journal/';

      Journals.prototype.parse = function(response) {
        return response.objects;
      };

      return Journals;

    })(Backbone.Collection);
    Volumes = (function(_super) {

      __extends(Volumes, _super);

      function Volumes() {
        return Volumes.__super__.constructor.apply(this, arguments);
      }

      Volumes.prototype.url = '/api/v1/stacks/volume/';

      Volumes.prototype.parse = function(response) {
        return response.objects;
      };

      return Volumes;

    })(Backbone.Collection);
    VolumesOfJournal = (function(_super) {

      __extends(VolumesOfJournal, _super);

      function VolumesOfJournal() {
        return VolumesOfJournal.__super__.constructor.apply(this, arguments);
      }

      VolumesOfJournal.prototype.url = '/api/v1/stacks/volume/';

      VolumesOfJournal.prototype.parse = function(response) {
        return response.objects;
      };

      return VolumesOfJournal;

    })(Backbone.Collection);
    IssuesOfVolume = (function(_super) {

      __extends(IssuesOfVolume, _super);

      function IssuesOfVolume() {
        return IssuesOfVolume.__super__.constructor.apply(this, arguments);
      }

      IssuesOfVolume.prototype.url = '/api/v1/stacks/issue/';

      IssuesOfVolume.prototype.parse = function(response) {
        return response.objects;
      };

      return IssuesOfVolume;

    })(Backbone.Collection);
    Articles = (function(_super) {

      __extends(Articles, _super);

      function Articles() {
        return Articles.__super__.constructor.apply(this, arguments);
      }

      Articles.prototype.model = Article;

      Articles.prototype.url = '/api/v1/stacks/article/';

      Articles.prototype.parse = function(response) {
        return response.objects;
      };

      return Articles;

    })(Backbone.Collection);
    Files = (function(_super) {

      __extends(Files, _super);

      function Files() {
        return Files.__super__.constructor.apply(this, arguments);
      }

      Files.prototype.url = '/api/v1/stacks/file/';

      Files.prototype.parse = function(response) {
        return response.objects;
      };

      return Files;

    })(Backbone.Collection);
    PublisherList = (function(_super) {

      __extends(PublisherList, _super);

      function PublisherList() {
        var _this = this;
        this.paginate = function(e) {
          return PublisherList.prototype.paginate.apply(_this, arguments);
        };
        return PublisherList.__super__.constructor.apply(this, arguments);
      }

      PublisherList.prototype.limit = 50;

      PublisherList.prototype.events = {
        'click .pager': 'paginate'
      };

      PublisherList.prototype.paginate = function(e) {
        var page;
        e.preventDefault();
        page = $(e.currentTarget).data('page');
        return this.render(page);
      };

      PublisherList.prototype.initialize = function() {
        $(this.el).off('click', '.pager');
        return this.render(0);
      };

      PublisherList.prototype.render = function(offset) {
        var publishers,
          _this = this;
        publishers = new Publishers;
        return publishers.fetch({
          data: {
            limit: this.limit,
            offset: offset
          },
          success: function(publishers, data) {
            var template;
            _this.data = data;
            template = Handlebars.compile(publisherTemplate);
            $(_this.el).html(template({
              publishers: publishers.models
            }));
            eventAgg.trigger('paginate', _this.data.meta.total_count, _this.limit);
            eventAgg.trigger('titleUpdate', null);
            return eventAgg.trigger('menuUpdate', null);
          },
          beforeSend: function() {
            return $('body').addClass('busybody');
          },
          complete: function() {
            return $('body').removeClass('busybody');
          },
          error: function(publishers, error) {
            return eventAgg.trigger('error', error);
          }
        });
      };

      return PublisherList;

    })(Backbone.View);
    JournalSublist = (function(_super) {

      __extends(JournalSublist, _super);

      function JournalSublist() {
        var _this = this;
        this.paginate = function(e) {
          return JournalSublist.prototype.paginate.apply(_this, arguments);
        };
        return JournalSublist.__super__.constructor.apply(this, arguments);
      }

      JournalSublist.prototype.limit = 50;

      JournalSublist.prototype.events = {
        'click .pager': 'paginate'
      };

      JournalSublist.prototype.paginate = function(e) {
        var page;
        e.preventDefault();
        page = $(e.currentTarget).data('page');
        return this.render(page);
      };

      JournalSublist.prototype.initialize = function() {
        $(this.el).off('click', '.pager');
        return this.render(0);
      };

      JournalSublist.prototype.render = function(offset) {
        var journals,
          _this = this;
        journals = new Journals;
        return journals.fetch({
          data: {
            limit: this.limit,
            offset: offset,
            publishers: this.options.publ
          },
          success: function(journals, data) {
            var publisher;
            _this.data = data;
            publisher = new Publisher({
              id: _this.options.publ
            });
            return publisher.fetch({
              success: function(publisher) {
                var publisherTitle, template;
                publisherTitle = publisher.attributes.title;
                template = Handlebars.compile(journalTemplate);
                $(_this.el).html(template({
                  journals: journals.models,
                  publisher: publisherTitle
                }));
                eventAgg.trigger('paginate', _this.data.meta.total_count, _this.limit);
                return eventAgg.trigger('menuUpdate', null);
              }
            });
          },
          beforeSend: function() {
            return $('body').addClass('busybody');
          },
          complete: function() {
            $('body').removeClass('busybody');
            return $("html, body").animate({
              scrollTop: 0
            }, "fast");
          },
          error: function(journals, error) {
            return eventAgg.trigger('error', error);
          }
        });
      };

      return JournalSublist;

    })(Backbone.View);
    JournalList = (function(_super) {

      __extends(JournalList, _super);

      function JournalList() {
        var _this = this;
        this.paginate = function(e) {
          return JournalList.prototype.paginate.apply(_this, arguments);
        };
        return JournalList.__super__.constructor.apply(this, arguments);
      }

      JournalList.prototype.limit = 50;

      JournalList.prototype.events = {
        'click .pager': 'paginate'
      };

      JournalList.prototype.paginate = function(e) {
        var page;
        e.preventDefault();
        page = $(e.currentTarget).data('page');
        return this.render(page);
      };

      JournalList.prototype.initialize = function() {
        $(this.el).off('click', '.pager');
        return this.render(0);
      };

      JournalList.prototype.render = function(offset) {
        var journals,
          _this = this;
        journals = new Journals;
        return journals.fetch({
          data: {
            limit: this.limit,
            offset: offset
          },
          success: function(journals, data) {
            var template;
            _this.data = data;
            template = Handlebars.compile(journalTemplate);
            $(_this.el).html(template({
              journals: journals.models
            }));
            eventAgg.trigger('paginate', _this.data.meta.total_count, _this.limit);
            eventAgg.trigger('titleUpdate', null);
            return eventAgg.trigger('menuUpdate', null);
          },
          beforeSend: function() {
            return $('body').addClass('busybody');
          },
          complete: function() {
            $('body').removeClass('busybody');
            return $("html, body").animate({
              scrollTop: 0
            }, "fast");
          },
          error: function(journals, error) {
            return eventAgg.trigger('error', error);
          }
        });
      };

      return JournalList;

    })(Backbone.View);
    JournalDetail = (function(_super) {

      __extends(JournalDetail, _super);

      function JournalDetail() {
        return JournalDetail.__super__.constructor.apply(this, arguments);
      }

      JournalDetail.prototype.initialize = function() {
        return this.render();
      };

      JournalDetail.prototype.render = function() {
        var journal,
          _this = this;
        journal = new Journal({
          id: this.options.journalID
        });
        return journal.fetch({
          success: function(journal) {
            var template;
            journal.name = 'journal';
            eventAgg.trigger('titleUpdate', journal.attributes.full_title);
            eventAgg.trigger('menuUpdate', journal);
            template = Handlebars.compile(journalDetail);
            return $(_this.el).html(template({
              journal: journal.attributes
            }));
          },
          beforeSend: function() {
            return $('body').addClass('busybody');
          },
          complete: function() {
            return $('body').removeClass('busybody');
          },
          error: function(journal, error) {
            return eventAgg.trigger('error', error);
          }
        });
      };

      return JournalDetail;

    })(Backbone.View);
    VolumeDetail = (function(_super) {

      __extends(VolumeDetail, _super);

      function VolumeDetail() {
        return VolumeDetail.__super__.constructor.apply(this, arguments);
      }

      VolumeDetail.prototype.initialize = function() {
        return this.render();
      };

      VolumeDetail.prototype.render = function() {
        var volume,
          _this = this;
        volume = new Volume({
          id: this.options.volumeID
        });
        return volume.fetch({
          success: function(volume) {
            var allowed, orphanFiles, template;
            volume.name = 'volume';
            _.each(volume.attributes.orphan_articles, function(item) {
              var file, fileType;
              fileType = new FileType;
              file = fileType.determine(item.all_files);
              if (file.has_stylesheet) {
                return item.file_url = file.stacks_get_transform_url;
              } else {
                return item.file_url = file.stacks_get_absolute_url;
              }
            });
            orphanFiles = [];
            allowed = ['application/pdf', 'text/xml', 'text/html'];
            _.each(volume.attributes.orphan_files, function(orphan) {
              var ext;
              ext = orphan.file_format;
              if (__indexOf.call(allowed, ext) >= 0) {
                if (ext !== 'text/xml') {
                  orphan.file_url = orphan.stacks_get_absolute_url;
                  return orphanFiles.push(orphan);
                } else if (orphan.has_stylesheet) {
                  orphan.file_url = orphan.stacks_get_transform_url;
                  return orphanFiles.push(orphan);
                }
              }
            });
            template = Handlebars.compile(volumeDetail);
            $(_this.el).html(template({
              volume: volume.attributes,
              orphans: orphanFiles
            }));
            eventAgg.trigger('titleUpdate', volume.attributes.journal.full_title);
            return eventAgg.trigger('menuUpdate', volume);
          },
          beforeSend: function() {
            return $('body').addClass('busybody');
          },
          complete: function() {
            return $('body').removeClass('busybody');
          },
          error: function(volume, error) {
            return eventAgg.trigger('error', error);
          }
        });
      };

      return VolumeDetail;

    })(Backbone.View);
    IssueDetail = (function(_super) {

      __extends(IssueDetail, _super);

      function IssueDetail() {
        return IssueDetail.__super__.constructor.apply(this, arguments);
      }

      IssueDetail.prototype.initialize = function() {
        return this.render();
      };

      IssueDetail.prototype.render = function() {
        var issue,
          _this = this;
        issue = new Issue({
          id: this.options.issueID
        });
        return issue.fetch({
          success: function(issue) {
            var allowed, orphanFiles, template;
            issue.name = 'issue';
            eventAgg.trigger('titleUpdate', issue.attributes.journal.full_title);
            eventAgg.trigger('menuUpdate', issue);
            _.each(issue.attributes.articles, function(item) {
              var file, fileType;
              fileType = new FileType;
              file = fileType.determine(item.all_files);
              if (file.has_stylesheet) {
                return item.file_url = file.stacks_get_transform_url;
              } else {
                return item.file_url = file.stacks_get_absolute_url;
              }
            });
            orphanFiles = [];
            allowed = ['application/pdf', 'text/xml', 'text/html'];
            _.each(issue.attributes.orphan_files, function(orphan) {
              var ext;
              ext = orphan.file_format;
              if (__indexOf.call(allowed, ext) >= 0) {
                if (ext !== 'text/xml') {
                  orphan.file_url = orphan.stacks_get_absolute_url;
                  return orphanFiles.push(orphan);
                } else if (orphan.has_stylesheet) {
                  orphan.file_url = orphan.stacks_get_transform_url;
                  return orphanFiles.push(orphan);
                }
              }
            });
            template = Handlebars.compile(issueDetail);
            return $(_this.el).html(template({
              issue: issue.attributes,
              orphans: orphanFiles
            }));
          },
          beforeSend: function() {
            return $('body').addClass('busybody');
          },
          complete: function() {
            return $('body').removeClass('busybody');
          },
          error: function(issue, error) {
            return eventAgg.trigger('error', error);
          }
        });
      };

      return IssueDetail;

    })(Backbone.View);
    ArticleView = (function(_super) {

      __extends(ArticleView, _super);

      function ArticleView() {
        var _this = this;
        this.render = function() {
          return ArticleView.prototype.render.apply(_this, arguments);
        };
        this.initialize = function() {
          return ArticleView.prototype.initialize.apply(_this, arguments);
        };
        return ArticleView.__super__.constructor.apply(this, arguments);
      }

      ArticleView.prototype.initialize = function() {
        $(this.el).off('click', '.pager');
        return this.render();
      };

      ArticleView.prototype.render = function() {
        var article,
          _this = this;
        article = new Article({
          id: this.options.articleID
        });
        return article.fetch({
          beforeSend: function() {
            return $('body').addClass('busybody');
          },
          error: function(article, error) {
            return eventAgg.trigger('error', error);
          },
          success: function(article) {
            var issue, volume;
            if (article.attributes.issue != null) {
              issue = new Issue({
                id: article.attributes.issue.id
              });
              return issue.fetch({
                beforeSend: function() {
                  return $('body').addClass('busybody');
                },
                complete: function() {
                  return $('body').removeClass('busybody');
                },
                error: function(issue, error) {
                  return eventAgg.trigger('error', error);
                },
                success: function(issue) {
                  var article_list, file, fileType, file_template, template;
                  article_list = [];
                  _.each(issue.attributes.articles, function(article) {
                    return article_list.push(article.id);
                  });
                  article.index = $.inArray(article.id, article_list);
                  article.next = article_list[article.index + 1];
                  article.prev = article_list[article.index - 1];
                  article.nextIndex = article.index + 1;
                  article.prevIndex = article.index - 1;
                  article.name = 'article';
                  eventAgg.trigger('titleUpdate', article.attributes.title);
                  eventAgg.trigger('menuUpdate', article);
                  file_template = '';
                  fileType = new FileType;
                  file = fileType.determine(article.attributes.all_files);
                  article.file_url = file.stacks_get_absolute_url;
                  if (file.file_format === 'application/pdf') {
                    file_template = pdfTemplate;
                  } else if (file.file_format === 'text/xml') {
                    file_template = xmlTemplate;
                    article.file_url = file.stacks_get_transform_url;
                  } else if (file.file_format === 'text/html') {
                    file_template = htmlTemplate;
                  } else {
                    file_template = imageTemplate;
                  }
                  template = Handlebars.compile(file_template);
                  return $(_this.el).html(template({
                    article: article
                  }));
                }
              });
            } else if (article.attributes.volume != null) {
              volume = new Volume({
                id: article.attributes.volume.id
              });
              return volume.fetch({
                beforeSend: function() {
                  return $('body').addClass('busybody');
                },
                complete: function() {
                  return $('body').removeClass('busybody');
                },
                error: function(issue, error) {
                  return eventAgg.trigger('error', error);
                },
                success: function(volume) {
                  var article_list, file, fileType, file_template, template;
                  article_list = [];
                  _.each(volume.attributes.orphan_articles, function(article) {
                    return article_list.push(article.id);
                  });
                  article.index = $.inArray(article.id, article_list);
                  article.next = article_list[article.index + 1];
                  article.prev = article_list[article.index - 1];
                  article.nextIndex = article.index + 1;
                  article.prevIndex = article.index - 1;
                  article.name = 'article';
                  eventAgg.trigger('titleUpdate', article.attributes.title);
                  eventAgg.trigger('menuUpdate', article);
                  file_template = '';
                  fileType = new FileType;
                  file = fileType.determine(article.attributes.all_files);
                  article.file_url = file.stacks_get_absolute_url;
                  if (file.file_format === 'application/pdf') {
                    file_template = pdfTemplate;
                  } else if (file.file_format === 'text/xml') {
                    file_template = xmlTemplate;
                    article.file_url = file.stacks_get_transform_url;
                  } else if (file.file_format === 'text/html') {
                    file_template = htmlTemplate;
                  } else {
                    file_template = imageTemplate;
                  }
                  template = Handlebars.compile(file_template);
                  return $(_this.el).html(template({
                    article: article
                  }));
                }
              });
            }
          }
        });
      };

      return ArticleView;

    })(Backbone.View);
    OrphanView = (function(_super) {

      __extends(OrphanView, _super);

      function OrphanView() {
        var _this = this;
        this.render = function() {
          return OrphanView.prototype.render.apply(_this, arguments);
        };
        return OrphanView.__super__.constructor.apply(this, arguments);
      }

      OrphanView.prototype.initialize = function() {
        $(this.el).off('click', '.pager');
        return this.render();
      };

      OrphanView.prototype.render = function() {
        var file,
          _this = this;
        file = new File({
          id: this.options.fileID
        });
        return file.fetch({
          beforeSend: function() {
            return $('body').addClass('busybody');
          },
          complete: function() {
            return $('body').removeClass('busybody');
          },
          error: function(file, error) {
            return eventAgg.trigger('error', error);
          },
          success: function(file) {
            var issue, issueID, volume, volumeID;
            if (file.attributes.issues.length > 0) {
              issueID = file.attributes.issues[0].id;
              issue = new Issue({
                id: issueID
              });
              return issue.fetch({
                success: function(issue) {
                  var allowed, ext, file_list, file_template, template;
                  file_list = [];
                  allowed = ['application/pdf', 'text/xml', 'text/html'];
                  _.each(issue.attributes.orphan_files, function(file) {
                    var _ref;
                    if (_ref = file.file_format, __indexOf.call(allowed, _ref) >= 0) {
                      return file_list.push(file.id);
                    }
                  });
                  file.index = $.inArray(file.id, file_list);
                  file.next = file_list[file.index + 1];
                  file.prev = file_list[file.index - 1];
                  file.nextIndex = file.index + 1;
                  file.prevIndex = file.index - 1;
                  file.name = 'file';
                  file_template = '';
                  file.file_url = file.attributes.stacks_get_absolute_url;
                  ext = file.attributes.file_format;
                  if (ext === 'application/pdf') {
                    file_template = pdfTemplate;
                  } else if (ext === 'text/xml') {
                    file_template = xmlTemplate;
                    file.file_url = file.attributes.stacks_get_transform_url;
                  } else if (ext === 'text/html') {
                    file_template = htmlTemplate;
                  }
                  template = Handlebars.compile(file_template);
                  $(_this.el).html(template({
                    article: file
                  })).show();
                  return eventAgg.trigger('menuUpdate', file);
                }
              });
            } else if (file.attributes.volumes.length > 0) {
              volumeID = file.attributes.volumes[0].id;
              volume = new Volume({
                id: volumeID
              });
              return volume.fetch({
                success: function(volume) {
                  var allowed, ext, file_list, file_template, template;
                  file_list = [];
                  allowed = ['application/pdf', 'text/xml', 'text/html'];
                  _.each(volume.attributes.orphan_files, function(file) {
                    var _ref;
                    if (_ref = file.file_format, __indexOf.call(allowed, _ref) >= 0) {
                      return file_list.push(file.id);
                    }
                  });
                  file.index = $.inArray(file.id, file_list);
                  file.next = file_list[file.index + 1];
                  file.prev = file_list[file.index - 1];
                  file.nextIndex = file.index + 1;
                  file.prevIndex = file.index - 1;
                  file.name = 'file';
                  file_template = '';
                  file.file_url = file.attributes.stacks_get_absolute_url;
                  ext = file.attributes.file_format;
                  if (ext === 'application/pdf') {
                    file_template = pdfTemplate;
                  } else if (ext === 'text/xml') {
                    file_template = xmlTemplate;
                    file.file_url = file.attributes.stacks_get_transform_url;
                  } else if (ext === 'text/html') {
                    file_template = htmlTemplate;
                  }
                  template = Handlebars.compile(file_template);
                  $(_this.el).html(template({
                    article: file
                  })).show();
                  return eventAgg.trigger('menuUpdate', file);
                }
              });
            }
          }
        });
      };

      return OrphanView;

    })(Backbone.View);
    Paginator = (function(_super) {

      __extends(Paginator, _super);

      function Paginator() {
        return Paginator.__super__.constructor.apply(this, arguments);
      }

      Paginator.prototype.el = '#stacks';

      Paginator.prototype.render = function(total_count, limit) {
        var i, page_count, pages, template;
        if (total_count > limit) {
          page_count = Math.ceil(total_count / limit);
          i = 0;
          pages = (function() {
            var _results;
            _results = [];
            while (i < page_count) {
              _results.push(i++ * limit);
            }
            return _results;
          })();
          template = Handlebars.compile(paginatorTemplate);
          return $('.pagination').html(template({
            pages: pages
          }));
        }
      };

      return Paginator;

    })(Backbone.View);
    paginator = new Paginator;
    Title = (function(_super) {

      __extends(Title, _super);

      function Title() {
        var _this = this;
        this.render = function(title) {
          return Title.prototype.render.apply(_this, arguments);
        };
        return Title.__super__.constructor.apply(this, arguments);
      }

      Title.prototype.render = function(title) {
        var template;
        template = Handlebars.compile(titleTemplate);
        return document.title = template({
          journal: title
        });
      };

      return Title;

    })(Backbone.View);
    title = new Title;
    Menu = (function(_super) {

      __extends(Menu, _super);

      function Menu() {
        var _this = this;
        this.render = function(msg) {
          return Menu.prototype.render.apply(_this, arguments);
        };
        this.showArticleMenu = function(e) {
          return Menu.prototype.showArticleMenu.apply(_this, arguments);
        };
        return Menu.__super__.constructor.apply(this, arguments);
      }

      Menu.prototype.initialize = function() {
        var cookies;
        cookies = document.cookie.split('; ');
        return _.each(cookies, function(cookie) {
          var crumb;
          crumb = cookie.split('=');
          if (crumb[0] === 'lastpage') {
            window.location.hash = crumb[1];
            return document.cookie = 'lastpage=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
          }
        });
      };

      Menu.prototype.el = '#left';

      Menu.prototype.events = {
        'click .article_menu': 'showArticleMenu'
      };

      Menu.prototype.showArticleMenu = function(e) {
        var amenu,
          _this = this;
        amenu = $('#nav_article_list,#menu_shim');
        e.preventDefault();
        e.stopPropagation();
        $('.article_menu').toggleClass('active');
        amenu.toggle();
        if (amenu.is(':visible')) {
          amenu.on('click', function(e) {
            return e.stopPropagation();
          });
          return $(document).on('click', 'body', function(e) {
            e.stopPropagation();
            amenu.hide();
            $('.article_menu').removeClass('active');
            return $(document).off('click', 'body');
          });
        }
      };

      Menu.prototype.render = function(msg) {
        var articleMenu, comment, lsgroup, multiple_publishers, template;
        if (msg == null) {
          return $('#left nav').empty();
        } else {
          lsgroup = false;
          if ($('body').data('edep-ls-group')) {
            lsgroup = true;
          }
          if (msg.attributes.journal != null) {
            multiple_publishers = msg.attributes.journal.publishers.length > 1 ? true : false;
          } else if (msg.attributes.issues != null) {
            multiple_publishers = msg.attributes.issues[0].journal.publishers.length > 1 ? true : false;
          } else {
            multiple_publishers = msg.attributes.publishers.length > 1 ? true : false;
          }
          template = Handlebars.compile(menuTemplate);
          if (msg.name === 'journal') {
            $('#left nav').html(template({
              multiple_publishers: multiple_publishers,
              journal: msg.attributes,
              lsgroup: lsgroup
            }));
          }
          if (msg.name === 'volume') {
            $('#left nav').html(template({
              multiple_publishers: multiple_publishers,
              journal: msg.attributes.journal,
              volume: msg.attributes,
              lsgroup: lsgroup
            }));
            $('#nav_article_list').remove();
            $('#menu_shim').remove();
            comment = $('#content').contents().filter(function() {
              return this.nodeType === 8;
            });
            comment.remove();
            articleMenu = Handlebars.compile(articleMenuTemplate);
            $('#left').after(articleMenu({
              volume: msg.attributes
            }));
          }
          if (msg.name === 'issue') {
            $('#left nav').html(template({
              multiple_publishers: multiple_publishers,
              journal: msg.attributes.journal,
              volume: msg.attributes.volume,
              issue: msg.attributes,
              lsgroup: lsgroup
            }));
            $('#nav_article_list').remove();
            $('#menu_shim').remove();
            comment = $('#content').contents().filter(function() {
              return this.nodeType === 8;
            });
            comment.remove();
            articleMenu = Handlebars.compile(articleMenuTemplate);
            $('#left').after(articleMenu({
              issue: msg.attributes
            }));
          }
          if (msg.name === 'article') {
            $('#left nav').html(template({
              multiple_publishers: multiple_publishers,
              journal: msg.attributes.journal,
              volume: msg.attributes.volume,
              issue: msg.attributes.issue,
              article: msg.attributes,
              lsgroup: lsgroup
            }));
            $('#nav_article_list').remove();
            $('#menu_shim').remove();
            comment = $('#content').contents().filter(function() {
              return this.nodeType === 8;
            });
            comment.remove();
            articleMenu = Handlebars.compile(articleMenuTemplate);
            $('#left').after(articleMenu({
              issue: msg.attributes.issue,
              volume: msg.attributes.volume
            }));
          }
          if (msg.name === 'file') {
            $('#left nav').html(template({
              multiple_publishers: multiple_publishers,
              journal: msg.attributes.issues[0].journal,
              volume: msg.attributes.volumes[0],
              issue: msg.attributes.issues[0],
              article: msg.attributes.articles[0],
              lsgroup: lsgroup
            }));
            $('#nav_article_list').remove();
            $('#menu_shim').remove();
            comment = $('#content').contents().filter(function() {
              return this.nodeType === 8;
            });
            comment.remove();
            articleMenu = Handlebars.compile(articleMenuTemplate);
            return $('#left').after(articleMenu({
              issue: msg.attributes
            }));
          }
        }
      };

      return Menu;

    })(Backbone.View);
    menu = new Menu;
    FileType = (function() {

      function FileType() {}

      FileType.prototype.determine = function(files) {
        var file, item;
        file = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            item = files[_i];
            if (item.file_format === 'application/pdf') {
              _results.push(item);
            }
          }
          return _results;
        })();
        if (file.length < 1) {
          file = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = files.length; _i < _len; _i++) {
              item = files[_i];
              if (item.file_format === 'text/xml') {
                _results.push(item);
              }
            }
            return _results;
          })();
          if (file.length < 1) {
            file = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = files.length; _i < _len; _i++) {
                item = files[_i];
                if (item.file_format === 'text/html') {
                  _results.push(item);
                }
              }
              return _results;
            })();
            if (file.length < 1) {
              file = (function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = files.length; _i < _len; _i++) {
                  item = files[_i];
                  _results.push(item);
                }
                return _results;
              })();
            }
          }
        }
        return file[0];
      };

      return FileType;

    })();
    ErrorHandler = (function() {

      function ErrorHandler() {}

      ErrorHandler.prototype.handle = function(error) {
        if (error.status === 401) {
          document.cookie = 'lastpage=' + window.location.hash;
          return location.assign('/admin/?next=/stacks/');
        }
      };

      return ErrorHandler;

    })();
    error = new ErrorHandler;
    EventAggregator = (function() {

      function EventAggregator() {}

      _.extend(EventAggregator.prototype, Backbone.Events);

      return EventAggregator;

    })();
    eventAgg = new EventAggregator;
    eventAgg.on('menuUpdate', menu.render);
    eventAgg.on('titleUpdate', title.render);
    eventAgg.on('paginate', paginator.render);
    eventAgg.on('error', error.handle);
    Stacks = Backbone.Router.extend({
      routes: {
        '': 'home',
        'publishers(/:publisher)': 'publishers',
        'journals': 'journals',
        'publisher/:publisher': 'publisher',
        'journals/:id': 'journalDetail',
        'volume/:volume': 'volumeDetail',
        'issue/:issue': 'issueDetail',
        'article/:article': 'article',
        'file/:file': 'file'
      },
      home: function() {
        return new Menu({
          el: '#stacks'
        });
      },
      publishers: function() {
        return new PublisherList({
          el: '#stacks'
        });
      },
      journals: function() {
        return new JournalList({
          el: '#stacks'
        });
      },
      publisher: function(publisher) {
        return new JournalSublist({
          el: '#stacks',
          publ: publisher
        });
      },
      journalDetail: function(id) {
        return new JournalDetail({
          el: '#stacks',
          journalID: id
        });
      },
      volumeDetail: function(volume) {
        return new VolumeDetail({
          el: '#stacks',
          volumeID: volume
        });
      },
      issueDetail: function(issue) {
        return new IssueDetail({
          el: '#stacks',
          issueID: issue
        });
      },
      article: function(article) {
        return new ArticleView({
          el: '#stacks',
          articleID: article
        });
      },
      file: function(file) {
        return new OrphanView({
          el: '#stacks',
          fileID: file
        });
      }
    });
    stacks = new Stacks();
    stacks.on('route', function(e) {
      if ($('#nav_article_list').is(':visible')) {
        $('#nav_article_list,#menu_shim').hide();
        return $('.article_menu').removeClass('active');
      }
    });
    return Backbone.history.start();
  });

}).call(this);
